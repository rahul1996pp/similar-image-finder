import os
import shutil
import time
import cv2


def img_similarity(original, img_compare, file):
    sift = cv2.xfeatures2d.SIFT_create()
    kp_1, desc_1 = sift.detectAndCompute(original, None)
    kp_2, desc_2 = sift.detectAndCompute(img_compare, None)
    index_params = dict(algorithm=0, trees=5)
    search_params = dict(checks=search_times)
    flann = cv2.FlannBasedMatcher(index_params, search_params)
    matches = flann.knnMatch(desc_1, desc_2, k=2)
    good_points = []
    for m, n in matches:
        if m.distance < 0.7 * n.distance:
            good_points.append(m)
    if len(good_points) >= min_match_points:
        img_move(file, "matched")


def folder_list():
    folder = input("[+] Enter folder name or drag and drop :- ").replace('"', "")
    for (dirpath, dirnames, filenames) in os.walk(folder):
        print("[+] processing the folder :- ", dirpath)
        folder_files_list(dirpath)


def folder_files_list(dirpath):
    global num
    files = os.listdir(dirpath)
    print("[+] Total files in folder are ", len(files))
    for file in files:
        num += 1
        print("[{}] processing the image {}".format(num, file))
        img_compare = cv2.imread(os.path.join(dirpath, file))
        img_similarity(original, img_compare, os.path.join(dirpath, file))


def img_move(file, folder):
    shutil.move(file, folder)


def img_folder():
    if not os.path.exists("matched"):
        os.mkdir("matched")


def main():
    global num, original, min_match_points, search_times
    num = 0
    img_folder()
    original = cv2.imread(input("[+] Enter main image for reference :- ").replace('"', ""))
    min_match_points = int(input("[+] Enter minimum match points(Default 100) :-") or 100)
    search_times = int(input("[+] Enter the number os times to search for images higher the value higher accuracy or "
                             "press enter to use default(Default 0) :-") or 0)
    folder_list()
    time_output = time.time() - start_time
    print("[*] Time taken to process images is -",
          time.strftime("%H:%M:%S", time.gmtime(int('{:.0f}'.format(float(str(time_output)))))))
    print("[~] Successfully completed [~]")


def credit():
    print("""
            SIMILAR IMAGE FINDER USING BASE IMAGE
            """)
    print("""
 ██▀███   ▄▄▄       ██░ ██  █    ██  ██▓    
▓██ ▒ ██▒▒████▄    ▓██░ ██▒ ██  ▓██▒▓██▒    
▓██ ░▄█ ▒▒██  ▀█▄  ▒██▀▀██░▓██  ▒██░▒██░    
▒██▀▀█▄  ░██▄▄▄▄██ ░▓█ ░██ ▓▓█  ░██░▒██░    
░██▓ ▒██▒ ▓█   ▓██▒░▓█▒░██▓▒▒█████▓ ░██████▒
░ ▒▓ ░▒▓░ ▒▒   ▓▒█░ ▒ ░░▒░▒░▒▓▒ ▒ ▒ ░ ▒░▓  ░
  ░▒ ░ ▒░  ▒   ▒▒ ░ ▒ ░▒░ ░░░▒░ ░ ░ ░ ░ ▒  ░
  ░░   ░   ░   ▒    ░  ░░ ░ ░░░ ░ ░   ░ ░   
   ░           ░  ░ ░  ░  ░   ░         ░  ░ code generated by Rahul.p
""")


try:
    start_time = time.time()
    credit()
    main()
except KeyboardInterrupt:
    print("\n[-] Exiting...")
